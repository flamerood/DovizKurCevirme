<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAHiAAAAEAIACoDwAAFgAAACgAAAAeAAAAQAAAAAEAIAAAAAAAAA8AABMLAAATCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAABAAAAAZAAAAEwAA
        AA4AAAAVAAAAGgAAABoAAAAaAAAAGgAAABgAAAAUAAAADQAAAAUAAAABAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAGgAAAEoAAABmAAAAUgAA
        AD8AAABWAAAAagAAAGwAAABsAAAAawAAAGgAAABfAAAATAAAADAAAAATAAAAAwAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJAAAAPQAAAIkAAACrAAAAkgAA
        AHAAAACIAAAAqgAAAK8AAACvAAAArwAAAK0AAACqAAAAngAAAIAAAABNAAAAGwAAAAQAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAXAAAAYQQEAqoKCQXCBgUDrgEB
        AIEJCAWACQgFnAkIBaQJCAWkCQgFpAcGBKQCAgGoAAAArwAAALAAAACRAAAATAAAABIAAAABAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAuAgIBglJGK9d7aUL0X1E22hEP
        CZR3ZUPHjHdU4It2U+GLdlPhi3ZT4Ih0Ud1/bErYY1Q5zSkjF8ECAgGyAAAAfAAAACsAAAAEAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAABKIBsQpop3TfeljWD/m4Nb+Cgi
        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
        lUmkkIMepZSLALuzrAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAD////8/8AAfP+AADz/gAAc/wAADP8AAAz/AAAM/gAADP4AMAz+AAAM/AAAHPwAABz8AAAc+AgADPgI
        AAz4DAAM8BwAHPAcABzwHgA88D4APOA/AHzgAAD84AB//OAAP/zgAH/84AB//PAA//z4AP/8/////P//
        //z////8/////A==
</value>
  </data>
</root>